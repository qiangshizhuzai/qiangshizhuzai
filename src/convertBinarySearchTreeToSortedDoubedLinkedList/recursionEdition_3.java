package convertBinarySearchTreeToSortedDoubedLinkedList;

public class recursionEdition_3 {

	/*
	 * 改进递归版
	     解题思路：
	    思路与方法二中的递归版一致，仅对第2点中的定位作了修改，新增一个全局变量记录左子树的最后一个节点。
	 */
	
	    // 记录子树链表的最后一个节点，终结点只可能为只含左子树的非叶节点与叶节点
	    protected TreeNode leftLast = null;
	    public TreeNode Convert(TreeNode root) {
	        if(root==null)
	            return null;
	        if(root.left==null&&root.right==null){
	            leftLast = root;// 最后的一个节点可能为最右侧的叶节点
	            return root;
	        }
	        // 1.将左子树构造成双链表，并返回链表头节点
	        TreeNode left = Convert(root.left);
	        // 3.如果左子树链表不为空的话，将当前root追加到左子树链表
	        if(left!=null){
	            leftLast.right = root;
	            root.left = leftLast;
	        }
	        leftLast = root;// 当根节点只含左子树时，则该根节点为最后一个节点
	        // 4.将右子树构造成双链表，并返回链表头节点
	        TreeNode right = Convert(root.right);
	        // 5.如果右子树链表不为空的话，将该链表追加到root节点之后
	        if(right!=null){
	            right.left = root;
	            root.right = right;
	        }
	        return left!=null?left:root;       
	    }
}
